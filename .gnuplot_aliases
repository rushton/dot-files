#############################################################################
# gnuplot shortcuts
### gnu plot does support input from stdin, but does not support plotting
### multiple lines from stdin, thus we write the raw data to /tmp/gnuplotdata.
### Not ideal for large datasets but ¯\_(ツ)_/¯
### Requires dark2.pal from git@github.com:Gnuplotting/gnuplot-palettes.git in home dir for nicer colors
### curl https://raw.githubusercontent.com/Gnuplotting/gnuplot-palettes/master/dark2.pal > ~/gnuplot_dark2.pal
###
### Requires installation of imagemagick:
### wget https://imagemagick.org/download/ImageMagick.tar.gz && \
### tar xzf ImageMagick.tar.gz && \
### cd ImageMagick && \
### ./configure --with-x=11 && \
### make && sudo make install && rm -r ImageMagick*
##############################################################################

autotitle="set key autotitle columnhead;"
#
termwidth="set terminal png size 1200, 800; set output '| display png:-';"
plotcommand="set tics font 'Helvetica,10'; set key out vert; set key left top;load '~/gnuplot_dark2.pal'; plot for [i=2:20] '/tmp/gnuplotdata' using 1:i ls i lw 3 with lines;"
# "set format x" sets the display style for the date
# "set bmargin" sets the bottom margin for the graph, this allows the x labels to be taller while staying visible
# "set xtics rotate by" rotates the x labels 45 degress, which makes them readable
# "set xtics offset" modifies the positioning so they are correctly aligned witht the x graph tics
plotcommanddate="set timefmt '%Y-%m-%dT%H:%M:%S';set format x '%Y-%m-%d'; set bmargin 5.0;set rmargin 5.0; set xtics nomirror rotate by -60; set xdata time;$plotcommand"
plotcommanddatehour="set timefmt '%Y-%m-%dT%H:%M:%S';set format x '%Y-%m-%dT%H'; set bmargin 6.0; set rmargin 6.0; set xtics nomirror rotate by -60 offset 0,0; set xdata time;$plotcommand"

# simple plot, assumes first column as the y-axis, any columns after that are plotted separately
alias plot="tee /tmp/gnuplotdata > /dev/null &&  gnuplot -p -e \"$termwidth$plotcommand\" &> /dev/null && rm /tmp/gnuplotdata;"

# same as plot but take the first line and assumes it contains the column headers, uses them for the legend
alias plotautotitle="tee /tmp/gnuplotdata > /dev/null &&  gnuplot -p -e \"$termwidth$autotitle$plotcommand\" &> /dev/null && rm /tmp/gnuplotdata;"

# turns on stderr logging from gnuplot
alias plotdebug="tee /tmp/gnuplotdata > /dev/null &&  gnuplot -p -e \"$termwidth$plotcommand\" && rm /tmp/gnuplotdata;"

# same as plot, but assumes the first column is a date in the form <year>-<month>-<day>T<hour>:<minute>:<second>
alias plotdate="tee /tmp/gnuplotdata > /dev/null &&  gnuplot -p -e \"$termwidth$plotcommanddate\" 2>/dev/null && rm /tmp/gnuplotdata;"
alias plotdatehour="tee /tmp/gnuplotdata > /dev/null &&  gnuplot -p -e \"$termwidth$plotcommanddatehour\" 2>/dev/null && rm /tmp/gnuplotdata;"

# same as plot date, but with the same functionality as plotautotitle
alias plotdateautotitle="tee /tmp/gnuplotdata > /dev/null &&  gnuplot -p -e \"$termwidth$autotitle;$plotcommanddate\" 2>/dev/null && rm /tmp/gnuplotdata;"
alias plotdatehourautotitle="tee /tmp/gnuplotdata > /dev/null &&  gnuplot -p -e \"$termwidth$autotitle;$plotcommanddatehour\" 2>/dev/null && rm /tmp/gnuplotdata;"

# debug date plot
alias plotdatedebug="tee /tmp/gnuplotdata > /dev/null &&  gnuplot -p -e \"$termwidth$plotcommanddate\" && rm /tmp/gnuplotdata;"

# instead of plotting to a png, this plots ascii graph to the terminal. These are in functions so the tput command can be
# evaluated each time this is run so the window height/width changes dynamically with the size of the window at any
# given run.
function plotdumb() {
    tee /tmp/gnuplotdata > /dev/null &&  gnuplot -p -e "set terminal dumb $(tput cols) $(tput lines);$plotcommand" 2>&1 /dev/null | grep -v warning && rm /tmp/gnuplotdata;
}

function plotdumbautotitle() {
    tee /tmp/gnuplotdata > /dev/null &&  gnuplot -p -e "set terminal dumb $(tput cols) $(tput lines);$autotitle;$plotcommand;" 2>&1 /dev/null | grep -v warning && rm /tmp/gnuplotdata;
}
function plotdumbdebug() {
    tee /tmp/gnuplotdata > /dev/null &&  gnuplot -p -e "set terminal dumb $(tput cols) $(tput lines);$plotcommand;" && rm /tmp/gnuplotdata;
}

# same as plotdumb, but for dates
function plotdatedumb() {
    tee /tmp/gnuplotdata > /dev/null &&  gnuplot -p -e "set terminal dumb $(tput cols) $(tput lines);$plotcommanddate" 2>&1 /dev/null | grep -v warning && rm /tmp/gnuplotdata;
}

function plotdatedumbautotitle() {
    tee /tmp/gnuplotdata > /dev/null &&  gnuplot -p -e "set terminal dumb $(tput cols) $(tput lines);$autotitle;$plotcommanddate" 2>&1 /dev/null | grep -v warning && rm /tmp/gnuplotdata;
}

function plotdatedumbdebug() {
    tee /tmp/gnuplotdata > /dev/null &&  gnuplot -p -e "set terminal dumb $(tput cols) $(tput lines);$plotcommanddate;" 2>&1 /dev/null && rm /tmp/gnuplotdata;
}
